const OpenAI = require('openai');
const fs = require('fs');
const { questionsDB, tiebreakerQuestions } = require('./questions.js');

// Modell kan anges via CLI: --model=gpt-5-mini eller via env OPENAI_MODEL. Default: gpt-5-mini
const argModel = (process.argv.find(a => a.startsWith('--model=')) || '').split('=')[1];
const MODEL = argModel || process.env.OPENAI_MODEL || 'gpt-5-mini';

const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY
});

function withTokenLimit(baseParams, limit) {
    if ((MODEL || '').startsWith('gpt-5')) {
        return { ...baseParams, max_completion_tokens: limit };
    }
    return { ...baseParams, max_tokens: limit };
}

function baseParams(messages) {
    if ((MODEL || '').startsWith('gpt-5')) {
        return { model: MODEL, messages };
    }
    return { model: MODEL, messages, temperature: 0 };
}

async function verifyQuestion(question, answers, correctIndex, difficulty) {
    const prompt = `Du √§r en tennisexpert och spr√•kgranskare. Granska denna tennisfr√•ga noggrant:\n\nFR√ÖGA: "${question}"\nSVARSALTERNATIV: \n1. ${answers[0]}\n2. ${answers[1]} \n3. ${answers[2]}\n4. ${answers[3]}\n\nMARKERAT R√ÑTT SVAR: ${answers[correctIndex]} (alternativ ${correctIndex + 1})\nSV√ÖRIGHETSGRAD: ${difficulty}\n\nKontrollera:\n1. SVENSKA GRAMMATIK - √Ñr fr√•gan och svaren korrekt svenska?\n2. FAKTAKORREKTHET - √Ñr det markerade svaret verkligen r√§tt?\n3. SV√ÖRIGHETSGRAD - Passar fr√•gan f√∂r niv√•n "${difficulty}"?\n4. SVARSALTERNATIV - √Ñr alla alternativ trov√§rdiga distraktorer?\n\nSvara ENDAST med f√∂ljande format:\nSTATUS: [OK/KORRIGERA]\nSVENSKA: [kommentar om spr√•ket]\nFAKTA: [kommentar om riktigheten] \nSV√ÖRIGHETSGRAD: [kommentar om niv√•n]\nF√ñRSLAG: [om korrigering beh√∂vs, ge korrigerad version]\n\nExempel p√• korrigering:\nFR√ÖGA: "Korrigerad fr√•ga h√§r?"\nSVAR: ["Alt 1", "Alt 2", "Alt 3", "Alt 4"]\nR√ÑTT: 2 (f√∂r alternativ 3, 0-indexerat)`;

    try {
        const base = baseParams([
            { role: "system", content: "Du √§r en professionell tennisexpert och spr√•kgranskare som granskar quiz-fr√•gor f√∂r korrekt svenska och tennisfakta." },
            { role: "user", content: prompt }
        ]);
        const completion = await openai.chat.completions.create(
            withTokenLimit(base, 800)
        );

        return completion.choices[0].message.content;
    } catch (error) {
        console.error(`Fel vid granskning av fr√•ga: ${error.message || ''}`);
        if (error.status) console.error('Status:', error.status);
        if (error.response && error.response.data) {
            try { console.error('Response:', JSON.stringify(error.response.data, null, 2)); } catch (_) {}
        }
        return null;
    }
}

async function verifyTiebreakerQuestion(question, answer, tolerance, difficulty) {
    const prompt = `Du √§r en tennisexpert och spr√•kgranskare. Granska denna utslagsfr√•ga:\n\nFR√ÖGA: "${question}"\nR√ÑTT SVAR: ${answer}\nTOLERANS: ¬±${tolerance}\nSV√ÖRIGHETSGRAD: ${difficulty}\n\nKontrollera:\n1. SVENSKA GRAMMATIK - √Ñr fr√•gan korrekt svenska?\n2. FAKTAKORREKTHET - √Ñr svaret ${answer} korrekt?\n3. TOLERANS - √Ñr ¬±${tolerance} rimlig tolerans?\n4. SV√ÖRIGHETSGRAD - Passar fr√•gan f√∂r niv√•n "${difficulty}"?\n\nSvara ENDAST med f√∂ljande format:\nSTATUS: [OK/KORRIGERA]\nSVENSKA: [kommentar om spr√•ket]\nFAKTA: [kommentar om riktigheten]\nTOLERANS: [kommentar om toleransen]\nF√ñRSLAG: [om korrigering beh√∂vs, ge korrigerad version]`;

    try {
        const base = baseParams([
            { role: "system", content: "Du √§r en professionell tennisexpert som granskar utslagsfr√•gor f√∂r tennis-quiz." },
            { role: "user", content: prompt }
        ]);
        const completion = await openai.chat.completions.create(
            withTokenLimit(base, 600)
        );

        return completion.choices[0].message.content;
    } catch (error) {
        console.error(`Fel vid granskning av utslagsfr√•ga: ${error.message || ''}`);
        if (error.status) console.error('Status:', error.status);
        if (error.response && error.response.data) {
            try { console.error('Response:', JSON.stringify(error.response.data, null, 2)); } catch (_) {}
        }
        return null;
    }
}

async function verifyAllQuestions() {
    console.log(`üéæ Startar granskning av alla tennisfr√•gor med OpenAI (modell: ${MODEL})...\n`);
    
    if (!process.env.OPENAI_API_KEY) {
        console.error('‚ùå OPENAI_API_KEY environment variable √§r inte satt!');
        console.log('L√§gg till din OpenAI API-nyckel som environment variable i Railway.');
        return;
    }

    const results = { total: 0, needsCorrection: 0, errors: 0, corrections: [] };

    for (const [difficulty, questions] of Object.entries(questionsDB)) {
        console.log(`\nüìä Granskar ${difficulty.toUpperCase()} (${questions.length} fr√•gor):`);
        for (let i = 0; i < questions.length; i++) {
            const q = questions[i];
            results.total++;
            console.log(`  Fr√•ga ${i + 1}/${questions.length}: Granskar...`);
            const verification = await verifyQuestion(q.question, q.answers, q.correct, difficulty);
            if (verification) {
                if (verification.includes('STATUS: KORRIGERA')) {
                    results.needsCorrection++;
                    results.corrections.push({ type: 'regular', difficulty, index: i, original: q, verification });
                    console.log(`    ‚ö†Ô∏è  Beh√∂ver korrigering`);
                } else {
                    console.log(`    ‚úÖ OK`);
                }
            } else {
                results.errors++;
                console.log(`    ‚ùå Fel vid granskning`);
            }
            await new Promise(r => setTimeout(r, 500));
        }
    }

    console.log('\nüéØ Granskar UTSLAGSFR√ÖGOR:');
    for (const [difficulty, questions] of Object.entries(tiebreakerQuestions)) {
        console.log(`\nüìä Granskar ${difficulty.toUpperCase()} utslagsfr√•gor (${questions.length} fr√•gor):`);
        for (let i = 0; i < questions.length; i++) {
            const q = questions[i];
            results.total++;
            console.log(`  Utslagsfr√•ga ${i + 1}/${questions.length}: Granskar...`);
            const verification = await verifyTiebreakerQuestion(q.question, q.answer, q.tolerance, difficulty);
            if (verification) {
                if (verification.includes('STATUS: KORRIGERA')) {
                    results.needsCorrection++;
                    results.corrections.push({ type: 'tiebreaker', difficulty, index: i, original: q, verification });
                    console.log(`    ‚ö†Ô∏è  Beh√∂ver korrigering`);
                } else {
                    console.log(`    ‚úÖ OK`);
                }
            } else {
                results.errors++;
                console.log(`    ‚ùå Fel vid granskning`);
            }
            await new Promise(r => setTimeout(r, 500));
        }
    }

    const reportFile = `question-verification-report-${Date.now()}.json`;
    fs.writeFileSync(reportFile, JSON.stringify(results, null, 2));

    console.log('\n' + '='.repeat(60));
    console.log('üìã GRANSKNINGSRAPPORT:');
    console.log('='.repeat(60));
    console.log(`üìä Totalt granskade fr√•gor: ${results.total}`);
    console.log(`‚úÖ Fr√•gor som √§r OK: ${results.total - results.needsCorrection - results.errors}`);
    console.log(`‚ö†Ô∏è  Fr√•gor som beh√∂ver korrigering: ${results.needsCorrection}`);
    console.log(`‚ùå Fel vid granskning: ${results.errors}`);
    console.log(`üìÑ Detaljerad rapport sparad i: ${reportFile}`);

    if (results.needsCorrection > 0) {
        console.log('\nüîß FR√ÖGOR SOM BEH√ñVER KORRIGERING:');
        console.log('-'.repeat(40));
        results.corrections.forEach((correction, index) => {
            console.log(`\n${index + 1}. ${correction.type.toUpperCase()} - ${correction.difficulty.toUpperCase()} #${correction.index + 1}`);
            console.log(`Fr√•ga: "${correction.original.question}"`);
            console.log('Granskning:');
            console.log(correction.verification);
            console.log('-'.repeat(40));
        });
    }

    console.log('\nüéæ Granskning klar!');
}

if (require.main === module) {
    verifyAllQuestions().catch(console.error);
}

module.exports = { verifyAllQuestions, verifyQuestion, verifyTiebreakerQuestion }; 